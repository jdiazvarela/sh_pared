#!/bin/sh

if [ $# -lt 2 ]; then
	printf '%s\n' '[ Error ]: es necesario indicar dimensiones, <base> <altura>' 1>&2;
	exit 1;
fi;

base="$1";
shift
altura="$*";
error=1;

printf '%s' "${base}" | grep -E '^[0-9]+$' 1>/dev/null 2>/dev/null;
if [ $? -ne 0 ]; then
	printf '%s\n' "[ Error ]: formato no valido para la base '${base}'" 1>&2;
	error=0;
fi;

printf '%s' "${altura}" | grep -E '^[0-9]+$' 1>/dev/null 2>/dev/null;
if [ $? -ne 0 ]; then
	printf '%s\n' "[ Error ]: formato no valido para la altura '${altura}'" 1>&2;
	error=0;
elif [ ${altura} -gt 255 ]; then
	printf '%s\n' "[ Error ]: altura fuera de limites '${altura}'" 1>&2;
	error=0;
fi;

[ ${error} -eq 0 ] && exit 1;

# ejemplo de configuracion
configuracion='

	_#_________#____
	_##________##___
	_###__#__#_###_#
	#############_##
	_#_#####_#_###_#
	################
	####_#########_#

';

configuracion='
	###
	##_
	_##
'

# armando configuracion aleatorio

p_min=60;
p_max=100;

p_min="$( awk -v p="${p_min}" "BEGIN { print int( p * 256 / 100 ) }" )";
p_max="$( awk -v p="${p_max}" "BEGIN { print int( p * 256 / 100 ) }" )";

p_actual="${p_min}";
p_salto='6/21';
#p_salto=$(( ( p_max - p_min ) / ${altura} ));

configuracion='';
for j in $( seq 1 ${altura} ); do
	for i in $( seq 1 ${base} ); do
		configuracion="$( printf '%s%s' "${configuracion}" "$( [ "$( od -An -N1 -tu1 /dev/urandom )" -gt ${p_actual} ] && printf '_' || printf '#' )" )";
	done;
	configuracion="$( printf '%s\n	' "${configuracion}" )";
	p_actual=$(( p_actual + (( p_max - p_actual ) * ${p_salto}) ));
	#p_actual=$(( p_actual + p_salto ));
done;

cruzado=0;

# dimensiones
l_base=3;
l_altura=0;
l_profundidad=0;

# aristas
l_vertical='|';
l_horizontal='_';
l_diagonal='/';

# superficies
l_derecha=' ';
l_superior=' ';
l_frontal=' ';

# vertices
v_asi='/';
v_asd='/';
v_aii='|';
v_aid='|';

#v_asi='I';
#v_asd='D';
#v_aii='O';
#v_aid='P';

v_psi='_';
v_psd=' ';
v_pid='|';

#v_psi='A';
#v_psd='B';
#v_pid='C';

s_invisible='+';

#[ ${l_profundidad} -lt 1 ] && v_pid='/';

l_blanco=' ';
#l_blanco='Â·';


esPar() {
	printf '%s' "$*" \
	| \
	command grep '^.*[02468]$' 1>/dev/null 2>/dev/null;
};

mitad() {
	esPar "$*" \
	&& \
	printf '%s' "$(( $* / 2 ))" \
	|| \
	printf '%s' "$(( ( $* - 1 ) / 2 ))";
};

# $1: cantidad
# $2-*: texto a repetir
repetir() {

	local repeticiones="$1";
	shift;
	local texto="$*";

	printf "${texto}"'%.0s' $( seq 1 "${repeticiones}" );
};


# $1: y ... (0 a Y)
# $2-*: texto
linea_y() {

	local y="$1";
	[ ${y} -lt 0 ] && y=0;
	shift;
	local texto="$*";

	printf '%s' "${texto}" | sed -n "$(( ${y} + 1 ))"'p';
};

# $1: x ... (0 a X)
# $2: y ... (0 a Y)
# $3-*: texto
leer_xy() {

	local x="$1";
	shift
	local y="$1";
	shift
	local texto="$*";

	printf '%s' "$( printf '%s' "${texto}" | sed -n "$(( ${y} + 1 ))"'s/^.\{'"${x}"'\}\(.\).*$/\1/p' )";
};

# $1: x ... (0 a X)
# $2: y ... (0 a Y)
# $3: reemplazo
# $4-*: texto
cambio_xy() {

	local x="$1";
	shift;
	local y="$1";
	shift;
	local reemplazo="$1";
	shift;
	local texto="$*";

	local cantidad="$( printf '%s' "${reemplazo}" | command grep -o '.' | wc -l )";
	local linea="$( printf '%s' "${reemplazo}" | sed -E 's/([/\])/\\\1/g' )";

	printf '%s' "${texto}" \
	| \
	sed "$(( ${y} + 1 ))"'s/^\(.\{'"${x}"'\}\)\(.\{'"${cantidad}"'\}\)\(.*\)$/\1'"${linea}"'\3/';
};

# $1: x ... (0 a X)
# $2: y ... (0 a Y)
# $3: sprite
# $4-*: lienzo
pegar_xy() {

	local x="$1";
	shift;
	local y="$1";
	shift;
	local sprite="$1";
	shift;
	local texto="$*";

	local l;
	for l in $( seq 0 $(( $( printf '%s\n' "${sprite}" | wc -l ) - 1 )) ); do
		texto="$( cambio_xy ${x} $(( ${y} + ${l} )) "$( linea_y ${l} "${sprite}" )" "${texto}" )";
	done;

	printf '%s' "${texto}";
};

# $1: x ... (0 a X)
# $2: y ... (0 a Y)
# $3: invisible
# $4: sprite
# $5-*: lienzo
dibujar_xy() {

	local x="$1";
	shift;
	local y="$1";
	shift;
	local invisible="$1";
	shift;
	local sprite="$1";
	shift;
	local texto="$*";

	local l;
	local linea;

	local porcion;
	local medida;

	local i;

	for l in $( seq 0 $(( $( printf '%s\n' "${sprite}" | wc -l ) - 1 )) ); do

		linea="$( linea_y ${l} "${sprite}" )";
		i=0;

		while true; do
			porcion="$( printf '%s' "${linea}" | sed 's/'"${invisible}"'.*$//' )";

			# a trabajar??
			if [ -n "${porcion}" ]; then
				#printf '%s\n' "${porcion}";

				texto="$( cambio_xy $(( ${x} + ${i} )) $(( ${y} + ${l} )) "${porcion}" "${texto}" )";
			fi;

			i=$(( 1 + ${i} + $( printf '%s' "${porcion}" | command grep -o '.' | wc -l ) ));

			linea="$( \
				printf '%s' "${linea}" \
				| \
				sed -n 's/^'"$( \
					printf '%s' "${porcion}${invisible}" \
					| \
					sed 's/\//\\\//g' \
				)"'//p' \
			)";

			[ -z "${linea}" ] && break;
		done;
	done;

	printf '%s' "${texto}";
};

# $*: configuracion
construir() {

	local configuracion;

	# sin tabs iniciales
	configuracion="$( printf '%s' "$*" | sed 's/^[	]*//' )";

	# borrando primeras lineas en blanco
	while [ -n "${configuracion}" ] && [ -z "$( printf '%s' "${configuracion}" | head -n1 )" ]; do
		configuracion="$( printf '%s' "${configuracion}" | sed '1d' )";
	done;

	# borrando ultimas lineas en blanco
	while [ -n "${configuracion}" ] && [ -z "$( printf '%s' "${configuracion}" | tail -n1 )" ]; do
		configuracion="$( printf '%s' "${configuracion}" | sed '$d' )";
	done;

	# verificando caracteres
	if [ -n "$( printf '%s' "${configuracion}" | sed 's/[#_]//g' )" ]; then
		printf '%s\n' '[ Error ]: caracteres no permitidos' 1>&2;
		return 1;
	fi;

	# contando filas
	local filas;
	filas="$( printf '%s\n' "${configuracion}" | wc -l )";
	if [ $? -ne 0 ]; then
		printf '%s\n' '[ Error ]: al obtener el numero de lineas de la configuracion dada' 1>&2;
		return 1;
	fi;
	if [ ${filas} -lt 1 ]; then
		printf '%s\n' "[ Error ]: cantidad minima de lineas no alcanzado (${filas} < 1)" 1>&2;
		return 1;
	fi;

	# medida patron por linea
	local cantidad;
	cantidad="$( printf '%s' "${configuracion}" | sed -n '1p' | command grep -o '.' | wc -l )";
	if [ $? -ne 0 ]; then
		printf '%s\n' '[ Error ]: al contar caracteres de la primer linea (medida patron)' 1>&2;
		return 1;
	fi;

	# verificando constancia de longitud
	if [ ${filas} -gt 1 ]; then
		local indice;
		local medida;
		for indice in $( seq 2 ${filas} ); do
			medida="$( printf '%s' "${configuracion}" | sed -n "${indice}"'p' | command grep -o '.' | wc -l )";
			if [ $? -ne 0 ]; then
				printf '%s\n' "[ Error ]: al contar caracteres de la linea ${indice}" 1>&2;
				return 1;
			fi;
			if [ ${medida} -ne ${cantidad} ]; then
				printf '%s\n' "[ Error ]: la cantidad de catacteres de la linea ${indice} (${medida}) no coincide con la medida patron (${cantidad})" 1>&2;
				return 1;
			fi;
		done;
	fi;


	# -- SPRITE

	local sprite;
	for y in $( seq 1 $(( ${l_altura} + 1 + ${l_profundidad} + 1 + 1 )) ); do
		sprite="$( printf '%s\n%s' "${sprite}" "$( repetir $(( ${l_base} + 1 + ${l_profundidad} + 1 + 1 )) "${s_invisible}" )" )";
	done;
	sprite="$( printf '%s' "${sprite}" | sed '1d' )";

	# cara frontal
	for y in $( seq 1 ${l_altura} ); do
		for x in $( seq 1 ${l_base} ); do
			sprite="$( cambio_xy "${x}" "$(( ${l_profundidad} + ${y} + 1 ))" "${l_frontal}" "${sprite}" )";
		done;
	done;

	# vertices
	# anterior
	# superior
	# izquierda
	sprite="$( cambio_xy "0" "$(( ${l_profundidad} + 1 ))" "${v_asi}" "${sprite}" )";
	# derecha
	sprite="$( cambio_xy "$(( 1 + ${l_base} ))" "$(( ${l_profundidad} + 1 ))" "${v_asd}" "${sprite}" )";
	# interior
	# izquierda
	sprite="$( cambio_xy "0" "$(( ${l_altura} + 1 + ${l_profundidad} + 1 ))" "${v_aii}" "${sprite}" )";
	# derecha
	sprite="$( cambio_xy "$(( 1 + ${l_base} ))" "$(( ${l_altura} + 1 + ${l_profundidad} + 1 ))" "${v_aid}" "${sprite}" )";

	# posterior
	# superior
	# izquierda
	sprite="$( cambio_xy "$(( 1 + ${l_profundidad} ))" "0" "${v_psi}" "${sprite}" )";
	# derecha
	sprite="$( cambio_xy "$(( ${l_base} + 1 + ${l_profundidad} + 1 ))" "0" "${v_psd}" "${sprite}" )";
	# inferior
	# derecha
	sprite="$( cambio_xy "$(( ${l_base} + 1 + ${l_profundidad} + 1 ))" "$(( ${l_altura} + 1 ))" "${v_pid}" "${sprite}" )";

	# horizontales
	for x in $( seq 1 ${l_base} ); do
		# superior
		sprite="$( cambio_xy "${x}" "$(( ${l_profundidad} + 1 ))" "${l_horizontal}" "${sprite}" )";
		# inferior
		sprite="$( cambio_xy "${x}" "$(( 1 + ${l_profundidad} + ${l_altura} + 1 ))" "${l_horizontal}" "${sprite}" )";
		# profundidad
		sprite="$( cambio_xy "$(( ${x} + 1 + ${l_profundidad} ))" "0" "${l_horizontal}" "${sprite}" )";
	done;

	# verticales
	for y in $( seq 1 ${l_altura} ); do
		# izquierda
		sprite="$( cambio_xy "0" "$(( ${y} + 1 + ${l_profundidad} ))" "${l_vertical}" "${sprite}" )";
		# derecha
		sprite="$( cambio_xy "$(( 1 + ${l_base} ))" "$(( ${y} + 1 + ${l_profundidad} ))" "${l_vertical}" "${sprite}" )";
		# profundidad
		sprite="$( cambio_xy "$(( 1 + ${l_base} + 1 + ${l_profundidad} ))" "${y}" "${l_vertical}" "${sprite}" )";
	done;

	# lados
	local n;
	for n in $( seq 1 ${l_profundidad} ); do
		# horizontal
		for x in $( seq 1 ${l_base} ); do
			sprite="$( cambio_xy "$(( ${n} + ${x} ))" "$(( ${l_profundidad} + 1 - ${n} ))" "${l_superior}" "${sprite}" )";
		done;
		# vertical
		for y in $( seq 1 ${l_altura} ); do
			sprite="$( cambio_xy "$(( ${n} + ${l_base} + 1 ))" "$(( ${l_altura} + ${l_profundidad} + 1 - ${n} - ${y} + 1 ))" "${l_derecha}" "${sprite}" )";
		done;
		# diagonales
		# superior
		# izquierda
		sprite="$( cambio_xy "${n}" "$(( ${l_profundidad} + 1 - ${n} ))" "${l_diagonal}" "${sprite}" )";
		# derecha
		sprite="$( cambio_xy "$(( ${n} + ${l_base} + 1 ))" "$(( ${l_profundidad} + 1 - ${n} ))" "${l_diagonal}" "${sprite}" )";
		# inferior
		# derecha
		sprite="$( cambio_xy "$(( ${n} + ${l_base} + 1 ))" "$(( 1 + ${l_altura} + ${l_profundidad} + 1 - ${n} ))" "${l_diagonal}" "${sprite}" )";
	done;


	# -- LIENZO

	local salida;
	local x;
	local y;
	n="$(( $( [ ${cruzado} -ne 0 ]; printf '%s' "$?" ) * ( $( mitad "${l_base}" ) + 1 ) ))";
	local b;
	b="$( repetir "$(( 1 + ${l_profundidad} + 1 + ${n} ))" "${l_blanco}" )";
	for y in $( seq 1 $(( ${filas} * ( ${l_altura} + 1 ) + 1 + ${l_profundidad} + 1 )) ); do
		salida="$( printf '%s\n%s' "${salida}" "${b}" )";
		for x in $( seq 1 ${cantidad} ); do
			salida="$( printf '%s%s' "${salida}" "$( repetir $(( ${l_base} + 1 )) "${l_blanco}" )" )";
		done;
	done;
	salida="$( printf '%s' "${salida}" | sed '1d' )";

	local i;
	local j;
	y=$(( ( ${filas} - 1 ) * ( ${l_altura} + 1 ) ));
	for j in $( seq 0 $(( ${filas} - 1 )) ); do
		x=0;
		esPar "${j}" && x=$(( ${x} + ${n} ));
		for i in $( seq 0 $(( ${cantidad} - 1 )) ); do
			[ "$( leer_xy "${i}" "$(( ${filas} - 1 - ${j} ))" "${configuracion}" )" = "#" ] \
			&& \
			salida="$( dibujar_xy ${x} ${y} "${s_invisible}" "${sprite}" "${salida}" )";
			x="$(( ${x} + ( ${l_base} + 1 ) ))";
		done;
		y="$(( ${y} - ${l_altura} - 1 ))";
	done;

	#printf '%s\n' "${configuracion}";
	#echo ==================
	#printf '%s\n' "${sprite}";
	#echo ==================
	printf '%s\n' "${salida}";
	return 0;
};

construir "${configuracion}";
